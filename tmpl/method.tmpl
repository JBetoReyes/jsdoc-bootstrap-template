<?js
var data = obj;//console.log('METHOD DATA', data, "\n\n\n");
var self = this;
var authors = [];
// undefined, object, boolean, number, string
if (data.signature && data.signature.length) {
    data.signature = data.signature.replace(/&rarr;.*$/, '');
}

// tag methods that override or are inherited with appropriate classes for stylinge
var wrapClass = [];
if (data.overrides) wrapClass.push('overrides');
if (data.inherited) wrapClass.push('inherited');

// classes which are tagged using double quotes because they are namespaced poorly
// will show up with double quotes (e.g. "FL.dialog"). let's remove them.
name = name.replace(/['"']/g, '');
?>
<section class="docs-method <?js= wrapClass.join(' ') ?>">
    <dt>
    <h4 class="name" id="<?js= id.replace(':', '-') ?>">
        <?js= data.attribs + (kind === 'class' ? 'new ' : '') + name + (kind !== 'event' ? data.signature : ' : event') ?>
    </h4>

    <?js if (data.summary) { ?>

    <blockquote class="lead">
        <p class="summary"><?js= summary ?></p>
    </blockquote>

        <?js } ?>
    </dt>
    <dd>

        <?js if (data.description) { ?>
        <div class="description lead">
            <blockquote><?js= data.description.replace(/\n{2}/g, '<br><br>').replace(/^ +/, '') ?>
                <?js if (data.author || data.since) { ?>
                    <small>
                        <?js if (data.author && data.author.length) {

                            author.forEach(function(a) {
                                authors.push(self.resolveAuthorLinks(a));
                            }); ?>

                            <?js= authors.join(', ') ?>

                        <?js } ?>

                        <?js if (data.since && data.since.length) { ?>
                            (<?js= 'since ' + data.since ?>)
                        <?js } ?>
                    </small>
                <?js } ?>
            </blockquote>
        </div>
        <?js } ?>

        <?js if (kind === 'event' && data.type && data.type.names) {?>
            <h5>Type: <?js= self.partial('type.tmpl', data.type.names) ?></h5>
        <?js } ?>

        <?js if (data['this']) { ?>
            <h5>This:</h5>
            <ul><li><?js= this.linkto(data['this'], data['this']) ?></li></ul>
        <?js } ?>

        <?js if (data.params && params.length) { ?>
            <h5>Parameters:</h5>
            <?js= this.partial('params.tmpl', params) ?>
        <?js } ?>

        <?js if (data.returns && returns.length) { ?>
        <h5>Returns:</h5>
        <?js if (returns.length > 1) { ?><ul><?js
            returns.forEach(function(r) { ?>
                <li><?js= self.partial('returns.tmpl', r) ?></li>
            <?js });
        ?></ul><?js } else {
            returns.forEach(function(r) { ?>
                <?js= self.partial('returns.tmpl', r) ?>
            <?js });
        } } ?>

        <?js if (data.examples && examples.length) { ?>
            <h5>Example<?js= examples.length > 1? 's':'' ?></h5>
            <?js= this.partial('examples.tmpl', examples) ?>
        <?js } ?>

        <?js= this.partial('details.tmpl', data) ?>

        <?js if (data.fires && fires.length) { ?>
        <h5>Fires:</h5>
        <ul><?js fires.forEach(function(f) { ?>
            <li><?js= self.linkto(f) ?></li>
        <?js }); ?></ul>
        <?js } ?>

        <?js if (data.listens && listens.length) { ?>
        <h5>Listens to Events:</h5>
        <ul><?js listens.forEach(function(f) { ?>
            <li><?js= self.linkto(f) ?></li>
        <?js }); ?></ul>
        <?js } ?>

        <?js if (data.listeners && listeners.length) { ?>
        <h5>Listeners of This Event:</h5>
        <ul><?js listeners.forEach(function(f) { ?>
            <li><?js= self.linkto(f) ?></li>
        <?js }); ?></ul>
        <?js } ?>

        <?js if (data.exceptions && exceptions.length) { ?>
        <h5>Throws:</h5>
        <?js if (exceptions.length > 1) { ?><ul><?js
            exceptions.forEach(function(r) { ?>
                <li><?js= self.partial('exceptions.tmpl', r) ?></li>
            <?js });
        ?></ul><?js } else {
            exceptions.forEach(function(r) { ?>
                <?js= self.partial('exceptions.tmpl', r) ?>
            <?js });
        } } ?>
    </dd>
</section>
